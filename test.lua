local lines = vim.split("hey:there:whatsup", ":")
print(table.remove(lines, #lines))
-- ---@param bufnr number  -- Buffer number
-- ---@param ns_id number  -- Namespace id from nvim_create_namespace()
-- ---@param line number   -- Line number (0-based)
-- ---@param col number    -- Column number (0-based)
-- ---@param opts table    -- Optional parameters
-- ---@return number       -- Id of the created/updated extmark
-- local function set_line_background(bufnr, ns_id, line, col, opts)
--   opts = opts or {}
--   local hl_group = opts.hl_group or "MyBackground"
--   local id = opts.id
--   vim.cmd("highlight " .. hl_group .. " guibg=#ff0000")
--   return vim.api.nvim_buf_set_extmark(bufnr, ns_id, line, col, opts)
-- end
--
-- -- set_line_background(0, 1, 5, 0, { hl_group = "MyBackground", id = 1 })

-- ---@param bufnr number    -- Buffer number
-- ---@param line number     -- Line number (0-based)
-- ---@param hl_group string -- Highlight group
-- local function set_line_background(bufnr, line, hl_group)
--   local start_col = 0 -- Start column (0-based)
--   local end_col = -1 -- End column (-1 means until the end of the line)
--   local src_id = vim.api.nvim_create_namespace("set_line_background") -- Create a namespace
--   vim.api.nvim_buf_add_highlight(bufnr, src_id, hl_group, line, start_col, end_col)
-- end
--
-- -- Set the background color of line 5 to red
-- set_line_background(0, 6, "MyBackground")
--
-- -- lambda
--
-- -- Define a function to highlight occurrences of a word with virtual text
-- local function highlight_word_with_virtual_text(bufnr, word, highlight_group, text_to_display)
--   -- Loop through each line in the buffer
--   for line_number = 1, vim.api.nvim_buf_line_count(bufnr) do
--     local line_content = vim.api.nvim_buf_get_lines(bufnr, line_number - 1, line_number, false)[1]
--
--     -- Find all occurrences of the word in the line
--     for match_start, match_end in line_content:gmatch("(%S*)" .. word .. "(%S*)") do
--       -- Add virtual text to highlight the word
--       vim.api.nvim_buf_set_virtual_text(bufnr, 0, line_number - 1, { { text_to_display, highlight_group } }, {})
--     end
--   end
-- end
--
-- -- Usage: highlight occurrences of "lambda" with "λ"
-- -- highlight_word_with_virtual_text(0, "lambda", "MyVirtualTextHighlight", "λ")
--
-- -- Define a function to display virtual text for the word "lambda"
-- local function display_virtual_text(bufnr, line, col)
--   local ns_id = vim.api.nvim_create_namespace("virtual_text_lambda") -- Create a namespace
--   local text = { "λ", "SpecialChar" } -- Text to display (λ) with highlight group "SpecialChar"
--   vim.api.nvim_buf_set_virtual_text(bufnr, ns_id, line, { text }, {}) -- Set virtual text
-- end
--
-- -- Define a function to clear virtual text
-- local function clear_virtual_text(bufnr)
--   vim.api.nvim_buf_clear_namespace(bufnr, -1, 0, -1) -- Clear virtual text in the entire buffer
-- end
--
-- -- Callback function to handle CursorMoved event
-- function on_cursor_moved()
--   local bufnr = vim.api.nvim_get_current_buf() -- Get current buffer number
--   local line, col = unpack(vim.api.nvim_win_get_cursor(0)) -- Get cursor position (0-based)
--   local current_line = vim.api.nvim_buf_get_lines(bufnr, line - 1, line, false)[1] -- Get current line
--
--   -- Check if the word "lambda" is present at cursor position
--   if current_line:sub(col, col + 5) == "lambda" then
--     display_virtual_text(bufnr, line - 1, col - 1) -- Display virtual text
--   else
--     clear_virtual_text(bufnr) -- Clear virtual text if the word "lambda" is not present
--   end
-- end
--
-- -- Attach the on_cursor_moved function to CursorMoved event
-- -- vim.api.nvim_command("autocmd CursorMoved <buffer> lua on_cursor_moved()")
--
-- -- Define a function to replace occurrences of "lambda" with "λ" in the buffer
-- local function replace_lambda_with_symbol(bufnr)
--   local pattern = "\\blambda\\b" -- Pattern to match whole word "lambda"
--   local replacement = "λ" -- Replacement text "λ"
--   local flags = "g" -- Flags: 'g' for global substitution
--
--   -- Execute substitution command to replace occurrences of "lambda" with "λ"
--   vim.api.nvim_buf_set_option(bufnr, "modifiable", true) -- Enable modifiable
--   vim.api.nvim_command(string.format(":%s/%s/%s", ".", pattern, replacement .. "/" .. flags)) -- Substitution command
--   vim.api.nvim_buf_set_option(bufnr, "modifiable", false) -- Disable modifiable
-- end
--
-- -- Callback function to handle CursorMoved event
-- local function on_cursor_moved()
--   local bufnr = vim.api.nvim_get_current_buf() -- Get current buffer number
--   replace_lambda_with_symbol(bufnr) -- Replace occurrences of "lambda" with "λ" in the buffer
-- end
--
-- -- Attach the on_cursor_moved function to CursorMoved event
-- vim.api.nvim_command("autocmd CursorMoved <buffer> lua on_cursor_moved()")
